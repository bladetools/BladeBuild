/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.blade.build;

import java.io.*;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.io.FileUtils;
import org.gradle.api.file.Directory;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.BuildResult;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 * A simple functional test for the 'blade-build' plugin.
 */
public class BladeBuildPluginFunctionalTest {
    @Test public void sourceCheck() throws IOException {
        String output = runTask("build", "Fail.java").buildAndFail().getOutput();
        // Verify the result
        assertTrue(output.contains("Method getMyString_ not found"));

        output = runTask("build", "Test.java").build().getOutput();
        // Verify the result
        assertTrue(output.contains("BUILD SUCCESSFUL"));
    }

    private GradleRunner runTask(String task, String source) throws IOException {
        // Setup the test build
        File projectDir = new File("build/functionalTest");
        File sourceDir = new File(projectDir, "src/main/java");
        sourceDir.mkdirs();

        FileUtils.copyInputStreamToFile(getClass().getResourceAsStream("/" + source), new File(sourceDir, "Test.java"));
        FileUtils.copyInputStreamToFile(getClass().getResourceAsStream("/build.gradle"), new File(projectDir, "build.gradle"));
        FileUtils.copyInputStreamToFile(getClass().getResourceAsStream("/settings.gradle"), new File(projectDir, "settings.gradle"));

        // Run the build
        GradleRunner runner = GradleRunner.create();
        runner.forwardOutput();
        runner.withPluginClasspath();
        runner.withArguments(task);
        runner.withProjectDir(projectDir);
        runner.withDebug(true);
        return runner;
    }
}
